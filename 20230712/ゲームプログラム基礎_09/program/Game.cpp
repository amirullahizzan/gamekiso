#include "Main.h"
#include "Game.h"

#define MAP_W		16
#define	MAP_H		 9
#define BLOCK_SIZE	50

int map[MAP_H][MAP_W] =
{
	{ 4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
	{ 4,2,2,2,0,0,0,0,0,0,0,0,0,0,0,4 },
	{ 4,2,2,2,0,0,0,0,0,0,0,0,0,0,0,4 },
	{ 4,2,2,2,0,0,0,1,1,1,3,1,1,1,0,4 },
	{ 4,2,2,2,0,0,0,1,3,3,3,3,3,1,0,4 },
	{ 4,2,2,2,0,0,0,1,3,3,3,3,3,1,0,4 },
	{ 4,2,2,2,0,0,0,1,1,1,1,1,1,1,0,4 },
	{ 4,2,2,2,0,0,0,0,0,0,0,0,0,0,0,4 },
	{ 4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4 },
};

int map_image;

//---------------------------------------------------------------------------------
//	初期化処理
//---------------------------------------------------------------------------------
void GameInit()
{
	map_image = LoadGraph( "data/map.bmp" );

}
//---------------------------------------------------------------------------------
//	更新処理
//---------------------------------------------------------------------------------
void GameUpdate()
{

	if (PushHitKey(KEY_INPUT_SPACE))
	{
		int random_w = GetRand(MAP_W-1);
		int random_h = GetRand(MAP_H-1);

		int random_num = GetRand(4);

		map[random_h][random_w] = random_num;
	}
}
//---------------------------------------------------------------------------------
//	描画処理
//---------------------------------------------------------------------------------

int image_xy_data[5][2] = //stores the x and y of the .bmp
{
	{0,0},
	{100,0},
	{150,0},
	{100,50},
	{0,50},
};

void GameRender()
{

	for( int h = 0; h < MAP_H; h++ ){
		for( int w = 0; w < MAP_W; w++ ){
			int num = map[h][w];
			int x_num = image_xy_data[num][0];
			int y_num = image_xy_data[num][1];
			int x = w * BLOCK_SIZE;
			int y = h * BLOCK_SIZE;
			DrawRectGraph(x, y, x_num, y_num, BLOCK_SIZE, BLOCK_SIZE, map_image, 1);
			DrawFormatString(x,y,GetColor(255,255,255),"%d",num);
		}
	}


	DrawString( 20, 20, "２次元配列の番号からマップの作成", GetColor( 255, 255, 255 ) );
	DrawString( 20, 40, "使用画像は map.bmp → マップ番号に合わせて画像の一部分を描画", GetColor( 255, 255, 255 ) );
}
//---------------------------------------------------------------------------------
//	終了処理
//---------------------------------------------------------------------------------
void GameExit()
{
	DeleteGraph( map_image );
}
