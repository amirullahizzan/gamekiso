#include "Main.h"
#include "Game.h"
#include "Float2.h"
#include "Hit.h"
#include "Random.h"

//	プレイヤークラスがどういうものか見る必要があるので
#include "Player.h"
//	ＮＰＣクラスを使いたので
#include "Npc.h"

//	当たり判定で使うためのプレイヤーとＮＰＣの半径
#define CHARA_RADIUS	25.0f

//	プレイヤーの宣言（ Player クラスの変数を player という名前で宣言）
Player player;

//	ＮＰＣの数
#define NPC_MAX		5
//	ＮＰＣの宣言
Npc npc[NPC_MAX];

//---------------------------------------------------------------------------------
//	初期化処理
//---------------------------------------------------------------------------------
void GameInit()
{
	//	画像の読み込みや初期座標の設定
	player.Init();
	for (int i = 0;i<NPC_MAX;i++)
	{
	npc[i].Init();
	}
}
//---------------------------------------------------------------------------------
//	更新処理
//---------------------------------------------------------------------------------
void GameUpdate()
{
	//	プレイヤーを十字キーで座標移動
	player.Update();
	//	ＮＰＣの更新処理（特に何もしていません）
	for (int i = 0; i < NPC_MAX; i++)
	{
		npc[i].Update();
		if( CheckCircleHit( player.m_pos, CHARA_RADIUS, npc[i].m_pos, CHARA_RADIUS)) {
		//	当たったらＮＰＣの座標をランダムに設定
		npc[i].SetRandom();
		}
	}

	//	プレイヤーとＮＰＣの当たり判定
}
//---------------------------------------------------------------------------------
//	描画処理
//---------------------------------------------------------------------------------
void GameRender()
{
	//	ＮＰＣの描画処理
	for (int i = 0; i < NPC_MAX; i++)
	{ 
	npc[i].Render();
	}
	//	プレイヤーの描画処理（プレイヤーを手前に描画したいので）
	player.Render();

	DrawString( 16, 16, "クラスで実装", GetColor( 255, 255, 255 ) );
	DrawString( 16, 32, "十字キー：プレイヤー移動（移動に合わせて向きも変更）", GetColor( 255, 255, 0 ) );
	DrawString( 16, 48, "ＮＰＣは画面内にランダムに配置して開始", GetColor( 255, 255, 255 ) );
	DrawString( 16, 64, "プレイヤーとＮＰＣで当たり判定 → 当たったら画面内にランダムに配置", GetColor( 255, 255, 255 ) );
	DrawString( 16, 80, "ＮＰＣを複数にする（回転する）", GetColor( 255, 255, 0 ) );
}
//---------------------------------------------------------------------------------
//	終了処理
//---------------------------------------------------------------------------------
void GameExit()
{
	//	プレイヤーの終了処理
	player.Exit();
	//	ＮＰＣの終了処理
	
	for (int i = 0; i < NPC_MAX; i++)
	{
	npc[i].Exit();
	}

}
